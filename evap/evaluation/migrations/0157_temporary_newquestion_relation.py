# Generated by Django 5.2 on 2025-08-12 22:21

import django.db.models.deletion
from django.db import migrations, models


def questions_to_question_assignments(apps, _schema_editor):
    Question = apps.get_model("evaluation", "Question")
    NewQuestion = apps.get_model("evaluation", "NewQuestion")
    QuestionAssignment = apps.get_model("evaluation", "QuestionAssignment")
    RatingAnswerCounter = apps.get_model("evaluation", "RatingAnswerCounter")
    TextAnswer = apps.get_model("evaluation", "TextAnswer")
    assignments = {}
    new_questions = {}
    for question in Question.objects.all():
        new_question = new_questions.setdefault(
            (question.text_de, question.text_en, question.allows_additional_textanswers, question.type),
            NewQuestion(
                text_de=question.text_de,
                text_en=question.text_en,
                allows_additional_textanswers=question.allows_additional_textanswers,
                type=question.type,
            ),
        )
        assignments[question.pk] = QuestionAssignment(
            question=new_question, questionnaire_id=question.questionnaire_id, order=question.order
        )
    NewQuestion.objects.bulk_create(new_questions.values())
    QuestionAssignment.objects.bulk_create(assignments.values())

    def set_question_assignment(answer):
        answer.question_assignment = assignments[answer.question_id]
        return answer

    for model in (RatingAnswerCounter, TextAnswer):
        model.objects.bulk_update(
            map(set_question_assignment, model.objects.all()),
            fields=["question_assignment"],
        )


class Migration(migrations.Migration):
    dependencies = [
        ("evaluation", "0156_alter_userprofile_options"),
    ]

    operations = [
        migrations.CreateModel(
            name="NewQuestion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text_de", models.CharField(max_length=1024, verbose_name="question text (german)")),
                ("text_en", models.CharField(max_length=1024, verbose_name="question text (english)")),
                (
                    "allows_additional_textanswers",
                    models.BooleanField(default=True, verbose_name="allow additional text answers"),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("Text", [(0, "Text question")]),
                            (
                                "Unipolar Likert",
                                [(1, "Positive agreement question"), (12, "Negative agreement question")],
                            ),
                            ("Grade", [(2, "Grade question")]),
                            (
                                "Bipolar Likert",
                                [
                                    (6, "Easy-difficult question"),
                                    (7, "Few-many question"),
                                    (8, "Little-much question"),
                                    (9, "Small-large question"),
                                    (10, "Slow-fast question"),
                                    (11, "Short-long question"),
                                ],
                            ),
                            ("Yes-no", [(3, "Positive yes-no question"), (4, "Negative yes-no question")]),
                            ("Layout", [(5, "Heading")]),
                        ],
                        verbose_name="question type",
                    ),
                ),
            ],
            options={
                "verbose_name": "question",
                "verbose_name_plural": "questions",
            },
        ),
        migrations.CreateModel(
            name="QuestionAssignment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order", models.IntegerField(default=-1, verbose_name="question order")),
                (
                    "question",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="evaluation.newquestion"),
                ),
                (
                    "questionnaire",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_assignments",
                        to="evaluation.questionnaire",
                    ),
                ),
            ],
            options={"ordering": ["order"]},
        ),
        migrations.AddField(
            model_name="newquestion",
            name="questionnaires",
            field=models.ManyToManyField(through="evaluation.QuestionAssignment", to="evaluation.questionnaire"),
        ),
        migrations.AlterField(
            model_name="ratinganswercounter",
            name="question",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="evaluation.question", null=True),
        ),
        migrations.AlterField(
            model_name="textanswer",
            name="question",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="evaluation.question", null=True),
        ),
        migrations.AddField(
            model_name="ratinganswercounter",
            name="question_assignment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="evaluation.questionassignment", null=True
            ),
        ),
        migrations.AddField(
            model_name="textanswer",
            name="question_assignment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="evaluation.questionassignment", null=True
            ),
        ),
        migrations.AddConstraint(
            model_name="newquestion",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("type", 0), ("type", 5), _connector="OR", _negated=True),
                    models.Q(("allows_additional_textanswers", True), _negated=True),
                    _connector="OR",
                ),
                name="check_evaluation_textanswer_or_heading_question_has_no_additional_textanswers_new",
            ),
        ),
        migrations.RunPython(
            code=questions_to_question_assignments,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
